"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sqs_service_1 = require("./aws-sqs.service");
const testing_1 = require("@nestjs/testing");
const sqs_message_builder_1 = require("./sqs.message.builder");
const AppConfig_1 = require("../../config/AppConfig");
describe('SqsService', () => {
    let appConfig;
    let sqsMessageBuilder;
    let awsSqs;
    let sqsService;
    const mockAppConfig = () => ({ getAssociateReportQueueUrl: jest.fn() });
    const mockMessageBuilder = () => ({ build: jest.fn() });
    const mockSqs = () => ({ sendMessage: jest.fn() });
    beforeEach(async () => {
        const module = await testing_1.Test.createTestingModule({
            providers: [
                { provide: AppConfig_1.AppConfig, useFactory: mockAppConfig },
                { provide: sqs_message_builder_1.SqsMessageBuilder, useFactory: mockMessageBuilder },
                { provide: 'AWS_SQS', useFactory: mockSqs },
                aws_sqs_service_1.SqsService,
            ],
        }).compile();
        sqsMessageBuilder = module.get(sqs_message_builder_1.SqsMessageBuilder);
        appConfig = module.get(AppConfig_1.AppConfig);
        sqsService = module.get(aws_sqs_service_1.SqsService);
        awsSqs = module.get('AWS_SQS');
    });
    describe('ioc registration', () => {
        it('SqsService should be defined', () => {
            expect(sqsService).toBeDefined();
        });
        it('SqsMessageBuilder should be defined', () => {
            expect(sqsMessageBuilder).toBeDefined();
        });
        it('AppConfig should be defined', () => {
            expect(appConfig).toBeDefined();
        });
    });
    describe('it should send the message', () => {
        beforeEach(() => {
            awsSqs.sendMessage.mockReset();
        });
        it('should send a message', async () => {
            appConfig.getAssociateReportQueueUrl.mockReturnValue('http://aws.sqs');
            awsSqs.sendMessage.mockImplementation(() => {
                return {
                    promise() {
                        return Promise.resolve({ MessageId: 123456 });
                    },
                };
            });
            const message = sqsMessageBuilder.build();
            const result = await sqsService.send(message);
            expect(result).toBeTruthy();
            expect(awsSqs.sendMessage).toHaveBeenCalled();
        });
        it('fails to send the message', async () => {
            appConfig.getAssociateReportQueueUrl.mockReturnValue('http://aws.sqs');
            awsSqs.sendMessage.mockImplementation(() => {
                return {
                    promise() {
                        throw new Error('I am an error!');
                    },
                };
            });
            const message = sqsMessageBuilder.build();
            const result = await sqsService.send(message);
            expect(result).toBeFalsy();
            expect(awsSqs.sendMessage).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXdzLXNxcy5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXdzLXNxcy5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsdURBQStDO0FBQy9DLDZDQUFzRDtBQUN0RCwrREFBMEQ7QUFDMUQsc0RBQW1EO0FBR25ELFFBQVEsQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO0lBQzFCLElBQUksU0FBUyxDQUFDO0lBQ2QsSUFBSSxpQkFBaUIsQ0FBQztJQUN0QixJQUFJLE1BQU0sQ0FBQztJQUNYLElBQUksVUFBc0IsQ0FBQztJQUUzQixNQUFNLGFBQWEsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsMEJBQTBCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4RSxNQUFNLGtCQUFrQixHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4RCxNQUFNLE9BQU8sR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFbkQsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BCLE1BQU0sTUFBTSxHQUFrQixNQUFNLGNBQUksQ0FBQyxtQkFBbUIsQ0FBQztZQUMzRCxTQUFTLEVBQUU7Z0JBQ1QsRUFBRSxPQUFPLEVBQUUscUJBQVMsRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFO2dCQUNqRCxFQUFFLE9BQU8sRUFBRSx1Q0FBaUIsRUFBRSxVQUFVLEVBQUUsa0JBQWtCLEVBQUU7Z0JBQzlELEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFO2dCQUMzQyw0QkFBVTthQUNYO1NBQ0YsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRWIsaUJBQWlCLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBb0IsdUNBQWlCLENBQUMsQ0FBQztRQUNyRSxTQUFTLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBWSxxQkFBUyxDQUFDLENBQUM7UUFDN0MsVUFBVSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQWEsNEJBQVUsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFNLFNBQVMsQ0FBQyxDQUFDO0lBQ3RDLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtRQUNoQyxFQUFFLENBQUMsOEJBQThCLEVBQUUsR0FBRyxFQUFFO1lBQ3RDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRSxHQUFHLEVBQUU7WUFDN0MsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxFQUFFO1lBQ3JDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsRUFBRTtRQUMxQyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx1QkFBdUIsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNyQyxTQUFTLENBQUMsMEJBQTBCLENBQUMsZUFBZSxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDdkUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3pDLE9BQU87b0JBQ0wsT0FBTzt3QkFDTCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztvQkFDaEQsQ0FBQztpQkFDRixDQUFDO1lBQ0osQ0FBQyxDQUFDLENBQUM7WUFFSCxNQUFNLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUMxQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFOUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQzVCLE1BQU0sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNoRCxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQywyQkFBMkIsRUFBRSxLQUFLLElBQUksRUFBRTtZQUN6QyxTQUFTLENBQUMsMEJBQTBCLENBQUMsZUFBZSxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDdkUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3pDLE9BQU87b0JBQ0wsT0FBTzt3QkFDTCxNQUFNLElBQUksS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7b0JBQ3BDLENBQUM7aUJBQ0YsQ0FBQztZQUNKLENBQUMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxPQUFPLEdBQUcsaUJBQWlCLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDMUMsTUFBTSxNQUFNLEdBQUcsTUFBTSxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRTlDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUMzQixNQUFNLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDaEQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3FzU2VydmljZSB9IGZyb20gJy4vYXdzLXNxcy5zZXJ2aWNlJztcbmltcG9ydCB7IFRlc3QsIFRlc3RpbmdNb2R1bGUgfSBmcm9tICdAbmVzdGpzL3Rlc3RpbmcnO1xuaW1wb3J0IHsgU3FzTWVzc2FnZUJ1aWxkZXIgfSBmcm9tICcuL3Nxcy5tZXNzYWdlLmJ1aWxkZXInO1xuaW1wb3J0IHsgQXBwQ29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnL0FwcENvbmZpZyc7XG5pbXBvcnQgeyBTUVMgfSBmcm9tICdhd3Mtc2RrJztcblxuZGVzY3JpYmUoJ1Nxc1NlcnZpY2UnLCAoKSA9PiB7XG4gIGxldCBhcHBDb25maWc7XG4gIGxldCBzcXNNZXNzYWdlQnVpbGRlcjtcbiAgbGV0IGF3c1NxcztcbiAgbGV0IHNxc1NlcnZpY2U6IFNxc1NlcnZpY2U7XG5cbiAgY29uc3QgbW9ja0FwcENvbmZpZyA9ICgpID0+ICh7IGdldEFzc29jaWF0ZVJlcG9ydFF1ZXVlVXJsOiBqZXN0LmZuKCkgfSk7XG4gIGNvbnN0IG1vY2tNZXNzYWdlQnVpbGRlciA9ICgpID0+ICh7IGJ1aWxkOiBqZXN0LmZuKCkgfSk7XG4gIGNvbnN0IG1vY2tTcXMgPSAoKSA9PiAoeyBzZW5kTWVzc2FnZTogamVzdC5mbigpIH0pO1xuXG4gIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vZHVsZTogVGVzdGluZ01vZHVsZSA9IGF3YWl0IFRlc3QuY3JlYXRlVGVzdGluZ01vZHVsZSh7XG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgeyBwcm92aWRlOiBBcHBDb25maWcsIHVzZUZhY3Rvcnk6IG1vY2tBcHBDb25maWcgfSxcbiAgICAgICAgeyBwcm92aWRlOiBTcXNNZXNzYWdlQnVpbGRlciwgdXNlRmFjdG9yeTogbW9ja01lc3NhZ2VCdWlsZGVyIH0sXG4gICAgICAgIHsgcHJvdmlkZTogJ0FXU19TUVMnLCB1c2VGYWN0b3J5OiBtb2NrU3FzIH0sXG4gICAgICAgIFNxc1NlcnZpY2UsXG4gICAgICBdLFxuICAgIH0pLmNvbXBpbGUoKTtcblxuICAgIHNxc01lc3NhZ2VCdWlsZGVyID0gbW9kdWxlLmdldDxTcXNNZXNzYWdlQnVpbGRlcj4oU3FzTWVzc2FnZUJ1aWxkZXIpO1xuICAgIGFwcENvbmZpZyA9IG1vZHVsZS5nZXQ8QXBwQ29uZmlnPihBcHBDb25maWcpO1xuICAgIHNxc1NlcnZpY2UgPSBtb2R1bGUuZ2V0PFNxc1NlcnZpY2U+KFNxc1NlcnZpY2UpO1xuICAgIGF3c1NxcyA9IG1vZHVsZS5nZXQ8U1FTPignQVdTX1NRUycpO1xuICB9KTtcblxuICBkZXNjcmliZSgnaW9jIHJlZ2lzdHJhdGlvbicsICgpID0+IHtcbiAgICBpdCgnU3FzU2VydmljZSBzaG91bGQgYmUgZGVmaW5lZCcsICgpID0+IHtcbiAgICAgIGV4cGVjdChzcXNTZXJ2aWNlKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1Nxc01lc3NhZ2VCdWlsZGVyIHNob3VsZCBiZSBkZWZpbmVkJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHNxc01lc3NhZ2VCdWlsZGVyKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ0FwcENvbmZpZyBzaG91bGQgYmUgZGVmaW5lZCcsICgpID0+IHtcbiAgICAgIGV4cGVjdChhcHBDb25maWcpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdpdCBzaG91bGQgc2VuZCB0aGUgbWVzc2FnZScsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIGF3c1Nxcy5zZW5kTWVzc2FnZS5tb2NrUmVzZXQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgc2VuZCBhIG1lc3NhZ2UnLCBhc3luYyAoKSA9PiB7XG4gICAgICBhcHBDb25maWcuZ2V0QXNzb2NpYXRlUmVwb3J0UXVldWVVcmwubW9ja1JldHVyblZhbHVlKCdodHRwOi8vYXdzLnNxcycpO1xuICAgICAgYXdzU3FzLnNlbmRNZXNzYWdlLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcHJvbWlzZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBNZXNzYWdlSWQ6IDEyMzQ1NiB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IG1lc3NhZ2UgPSBzcXNNZXNzYWdlQnVpbGRlci5idWlsZCgpO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3FzU2VydmljZS5zZW5kKG1lc3NhZ2UpO1xuXG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlVHJ1dGh5KCk7XG4gICAgICBleHBlY3QoYXdzU3FzLnNlbmRNZXNzYWdlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnZmFpbHMgdG8gc2VuZCB0aGUgbWVzc2FnZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGFwcENvbmZpZy5nZXRBc3NvY2lhdGVSZXBvcnRRdWV1ZVVybC5tb2NrUmV0dXJuVmFsdWUoJ2h0dHA6Ly9hd3Muc3FzJyk7XG4gICAgICBhd3NTcXMuc2VuZE1lc3NhZ2UubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwcm9taXNlKCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJIGFtIGFuIGVycm9yIScpO1xuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgbWVzc2FnZSA9IHNxc01lc3NhZ2VCdWlsZGVyLmJ1aWxkKCk7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzcXNTZXJ2aWNlLnNlbmQobWVzc2FnZSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmVGYWxzeSgpO1xuICAgICAgZXhwZWN0KGF3c1Nxcy5zZW5kTWVzc2FnZSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19